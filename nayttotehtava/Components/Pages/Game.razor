@page "/game"
@rendermode InteractiveServer
@* @attribute [StreamRendering] *@

<PageTitle>Peli</PageTitle>

<h1>Tietovisa</h1>

@* Peli pyörii kunnes peli päättyy tai vastaa kaikkiin oikein*@
@if (!gameOver)
{
    <h4>Tunnista kuvan lintu:</h4>
    <div class="row">
        <img class=" col-6" src="@currentQuestion.pic" alt="bird" />
        <h4 class="col-6">Pisteet: @points</h4>
    </div>
    <div class="row my-2">
        <EditForm Model="answerModel" OnValidSubmit="CheckAnswer">
            <InputRadioGroup @bind-Value="answerModel.selectedAnswer">
                @for (int i = 0; i < currentQuestion.options.Length; i++)
                {
                    var option = currentQuestion.options[i];
                    <div class="p-2">
                        <InputRadio Value="@option"/>
                        <label>@option</label>
                    </div>
                }
            </InputRadioGroup>
            <button type="submit" class="btn btn-primary">Vastaa</button>
        </EditForm>
    </div>
} else
{
    <h4>@gameMessage</h4>
    <button type="button" class="btn btn-primary" @onclick="RestartGame">Aloita alusta</button>
}

@code {

    //Luodaan sisäinen luokka
    private class AnswerModel
    {
        public string? selectedAnswer { get; set; }
    }
    private AnswerModel answerModel = new();

    private record Question(string pic, string[] options, string correctAnswer);

    // Pelin kysymykset tallennettuna tänne
    private List<Question> questions = new()
    {
        new Question("/images/tunnistus/lintu1.jpg", new[] {"Selkälokki", "Kalalokki", "Naurulokki"}, "Naurulokki"),
        new Question("/images/tunnistus/lintu2.jpg", new[] {"Sarvipöllö", "Huuhkaja", "Hiiripöllö"}, "Huuhkaja"),
        new Question("/images/tunnistus/lintu3.jpg", new[] {"Kirjosieppo", "Pähkinänakkeli", "Kuusitiainen"}, "Pähkinänakkeli"),
        new Question("/images/tunnistus/lintu4.jpg", new[] {"Lehtokurppa", "Kuovi", "Ruostekuiri"}, "Lehtokurppa"),
        new Question("/images/tunnistus/lintu5.jpg", new[] {"Hiirihaukka", "Kanahaukka", "Varpushaukka"}, "Kanahaukka")
    };

    //Tarvitut muuttujat
    private int currentIndex = 0;
    private bool gameOver = false;
    private string gameMessage = "";
    private int points = 0;

    private Question currentQuestion => questions[currentIndex];

    //Tarkistetaan onko vastaus oikein
    private void CheckAnswer()
    {
        if(answerModel.selectedAnswer == currentQuestion.correctAnswer)
        {
            currentIndex++;
            points++;
            answerModel.selectedAnswer = null;

            if (currentIndex >= questions.Count)
            {
                gameOver = true;
                gameMessage = "Onneksi olkoon, voitit pelin!";
            }
        }
        else
        {
            gameOver = true;
            gameMessage = "Väärä vastaus, peli päättyi.";
        }
    }

    //Nollataan kaikki jos pelaaja haluaa aloittaa alusta
    private void RestartGame()
    {
        currentIndex = 0;
        answerModel.selectedAnswer = null;
        gameOver = false;
        gameMessage = "";
        points = 0;
    }

}
